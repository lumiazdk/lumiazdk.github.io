<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>海子诗选</title>
      <link href="/2019/04/27/hai-zi-shi-xuan/"/>
      <url>/2019/04/27/hai-zi-shi-xuan/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sat Apr 27 2019 22:45:42 GMT+0800 (中国标准时间) --><blockquote><p>过去的种种，痛苦或幸福，生不带来，死亦不带去。</p></blockquote><blockquote><p>陌生人啊，我也为你祝福，愿你有一个灿烂的前程，愿你有情人终成眷属。</p></blockquote><p><img src="https://res.cloudinary.com/lumiazdk/image/upload/v1554821492/blog/shzkliuztyjvleqywwxl.jpg" alt></p><blockquote><p>我无限地爱着新的一日，今天的太阳，今天的马，今天的花楸树，使我健康富足拥有一生。从黎明到黄昏，阳光充足，胜过一切过去的诗。幸福找到我，幸福说：“瞧这个诗人，他比我本人还要幸福。”</p></blockquote><blockquote><p>海子曾说：“要有最朴素的生活和最远的梦想，即使明天天寒地冻，山高水远，路远马亡。”</p></blockquote><blockquote><p>海子说：生命中有很多东西，能忘掉的叫过去，忘不掉的叫记忆。这情太重了，我一辈子也还不完了。</p></blockquote><p><img src="https://res.cloudinary.com/lumiazdk/image/upload/v1554821528/blog/z3lgdkrmlwyierxlffrg.jpg" alt></p><blockquote><p>你是灯，是我胸脯上的黑夜之蜜，灯，怀抱着黑夜之心，烧坏我从前的生活和诗歌。</p></blockquote><blockquote><p>人们啊，所有交给你的，都异常沉重，你要把泥沙握得紧紧，在收获时应该微笑，没必要痛苦地提起他们，没必要忧伤地记住他们。</p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 记录</title>
      <link href="/2019/04/27/git-learn/"/>
      <url>/2019/04/27/git-learn/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sat Apr 27 2019 22:45:42 GMT+0800 (中国标准时间) --><h2 id="什么是-Git？"><a href="#什么是-Git？" class="headerlink" title="什么是 Git？"></a>什么是 Git？</h2><blockquote><p>Git 是一个免费的开源分布式版本控制系统，它的设计目的是为了速度和效率的处理从小型到大型的项目；Git 可以帮我们管理我们的代码，记录历史，只要代码提交到 Git 上就永久不会丢失，可以随时 “穿越”（回到之前的某一个版本）；可以多端共享，团队协作中，多个人操作了同一个文件时，可以实现自动合并（模块化，组件化）、标记冲突，拥有强大的分支管理系统。</p></blockquote><h2 id="Git-的本地操作"><a href="#Git-的本地操作" class="headerlink" title="Git 的本地操作"></a>Git 的本地操作</h2><h3 id="1-配置用户"><a href="#1-配置用户" class="headerlink" title="1.配置用户"></a>1.配置用户</h3><h4 id="查看配置信息："><a href="#查看配置信息：" class="headerlink" title="查看配置信息："></a>查看配置信息：</h4><pre><code>git config --list</code></pre><h4 id="配置用户名："><a href="#配置用户名：" class="headerlink" title="配置用户名："></a>配置用户名：</h4><pre><code>git config --global user.name &quot;你的名字&quot;</code></pre><h4 id="配置邮箱："><a href="#配置邮箱：" class="headerlink" title="配置邮箱："></a>配置邮箱：</h4><pre><code>git config --global user.email &quot;你的邮箱&quot;</code></pre><h3 id="2-初始化-Git-仓库"><a href="#2-初始化-Git-仓库" class="headerlink" title="2.初始化 Git 仓库"></a>2.初始化 Git 仓库</h3><pre><code>git init</code></pre><h3 id="3-查看-Git-状态"><a href="#3-查看-Git-状态" class="headerlink" title="3.查看 Git 状态"></a>3.查看 Git 状态</h3><pre><code>git status</code></pre><h3 id="4-添加到暂存区"><a href="#4-添加到暂存区" class="headerlink" title="4.添加到暂存区"></a>4.添加到暂存区</h3><pre><code>git add 文件名git add .git add -A</code></pre><blockquote><p>. 和 -A 两个参数均为全部提交到暂存区，. 只监控修改、添加文件的变化，-A 监控修改、添加、删除文件。</p></blockquote><h3 id="5-删除暂存区"><a href="#5-删除暂存区" class="headerlink" title="5.删除暂存区"></a>5.删除暂存区</h3><pre><code>git rm --cached 文件名git rm --cached . -r</code></pre><blockquote><p>第一个命令是删除某一个文件的暂存区，当参数为 . 的时候删除全部暂存区，所以需要加上代表递归删除的参数 -r。</p></blockquote><h3 id="6提交到版本库"><a href="#6提交到版本库" class="headerlink" title="6提交到版本库"></a>6提交到版本库</h3><h4 id="从暂存区提交到版本库："><a href="#从暂存区提交到版本库：" class="headerlink" title="从暂存区提交到版本库："></a>从暂存区提交到版本库：</h4><pre><code>git commit -m &quot;版本信息&quot;</code></pre><h4 id="从工作区直接提交到版本库（需要之前添加过暂存区）："><a href="#从工作区直接提交到版本库（需要之前添加过暂存区）：" class="headerlink" title="从工作区直接提交到版本库（需要之前添加过暂存区）："></a>从工作区直接提交到版本库（需要之前添加过暂存区）：</h4><pre><code>git commit -a -m &quot;版本信息&quot;</code></pre><h3 id="7-查看提交日志"><a href="#7-查看提交日志" class="headerlink" title="7.查看提交日志"></a>7.查看提交日志</h3><pre><code>git log</code></pre><h3 id="8-比较工作区、暂存区、版本库"><a href="#8-比较工作区、暂存区、版本库" class="headerlink" title="8.比较工作区、暂存区、版本库"></a>8.比较工作区、暂存区、版本库</h3><blockquote><p>工作区和暂存区比较：</p><pre><code>git diff</code></pre></blockquote><h4 id="工作区和版本库比较："><a href="#工作区和版本库比较：" class="headerlink" title="工作区和版本库比较："></a>工作区和版本库比较：</h4><pre><code>git diff 分支名</code></pre><h4 id="暂存区和版本库比较："><a href="#暂存区和版本库比较：" class="headerlink" title="暂存区和版本库比较："></a>暂存区和版本库比较：</h4><pre><code>git diff --cached</code></pre><h3 id="9-撤销操作"><a href="#9-撤销操作" class="headerlink" title="9.撤销操作"></a>9.撤销操作</h3><pre><code>git checkout 文件名git checkout .</code></pre><blockquote><p>撤销操作是将暂存区覆盖到工作区，会放弃掉当前工作区修改的内容，. 参数是将整个暂存区覆盖当前工作区，一旦撤销就回不到之前的工作区了。<br>当不小心将当前工作区错误的代码提交到暂存区，可以使用下面命令将暂存区回滚到上一个暂存区，只可回滚一次。</p><pre><code>git reset HEAD 文件名</code></pre></blockquote><h3 id="10-回退版本"><a href="#10-回退版本" class="headerlink" title="10.回退版本"></a>10.回退版本</h3><h4 id="查看所有的版本号："><a href="#查看所有的版本号：" class="headerlink" title="查看所有的版本号："></a>查看所有的版本号：</h4><pre><code>git reflog</code></pre><h4 id="按版本号回退版本："><a href="#按版本号回退版本：" class="headerlink" title="按版本号回退版本："></a>按版本号回退版本：</h4><pre><code>git reset --hard 版本号</code></pre><h4 id="回退到上一个版本："><a href="#回退到上一个版本：" class="headerlink" title="回退到上一个版本："></a>回退到上一个版本：</h4><pre><code>git reset --hard HEAD^</code></pre><h4 id="回退某一个版本的文件到工作区："><a href="#回退某一个版本的文件到工作区：" class="headerlink" title="回退某一个版本的文件到工作区："></a>回退某一个版本的文件到工作区：</h4><pre><code>git checkout 版本号 文件名</code></pre><blockquote><p>回退版本会将当前版本库选中的版本重新覆盖暂存区和工作区。</p></blockquote><blockquote><p>待续。。。。</p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6 全面教程</title>
      <link href="/2019/04/27/es6-quan-mian-jiao-cheng/"/>
      <url>/2019/04/27/es6-quan-mian-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sat Apr 27 2019 22:45:42 GMT+0800 (中国标准时间) --><h3 id="1-三大基本特征"><a href="#1-三大基本特征" class="headerlink" title="1. 三大基本特征"></a>1. 三大基本特征</h3><blockquote><p>封装, 继承, 多态</p></blockquote><h3 id="ES5中对象的创建"><a href="#ES5中对象的创建" class="headerlink" title="ES5中对象的创建"></a>ES5中对象的创建</h3><ol><li>字面量<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Student <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'zhudk'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>subject<span class="token punctuation">:</span> <span class="token string">'前端开发'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li>构造函数<br><code>`</code> js<br>function Student (name, age, subject) {<br>this.name = name;<br>this.age = age;<br>this.subject = subject;<br>}<br>Student.prototype.study = function() {<br>console.log(‘我在学习’ + this.subject);<br>}<br>let student1 = new Student(‘阿坤’, 22, ‘前端开发’);<br>let student2 = new Student(‘阿傻’, 22, ‘大数据开发’);</li></ol><p>student1.study(); //我在学习前端开发<br>student2.study(); //我在学习大数据开发</p><p>console.log(student1.study === student2.study); //true</p><pre><code>### ES5中对象的继承1. prototype的原型继承```jsfunction Pupil(school) {  this.school = school;}Pupil.prototype = new Student(&#39;zhudk&#39;, 8, &#39;小学义务教育课程&#39;);Pupil.prototype.constructor = Pupil;let pupil1 = new Pupil(&#39;北大附小&#39;);Pupil.prototype = new Student(&#39;zhudk&#39;, 8, &#39;小学义务教育课程&#39;);</code></pre><ol start="2"><li>使用call和apply方法实现继承<h5 id="使用call实现继承"><a href="#使用call实现继承" class="headerlink" title="使用call实现继承"></a>使用call实现继承</h5><code>`</code>js<br>//父类构造函数<br>function Student (name, age, subject) {<br>this.name = name;<br>this.age = age;<br>this.subject = subject;<br>}</li></ol><p>//子类构造函数<br>//父类构造函数<br>function Student (name, age, subject) {<br>this.name = name;<br>this.age = age;<br>this.subject = subject;<br>}<br>//原型上挂载study方法<br>Student.prototype.study = function() {<br>console.log(‘我在学习’ + this.subject);<br>}</p><p>//子类构造函数<br>function Pupil(name, age, subject, school) {<br>//使用call实现继承<br>Student.call(this, name, age, subject);<br>this.school = school;<br>}</p><p>let pupil2 = new Pupil(‘zhudk’, 8, ‘小学义务教育课程’, ‘北大附小’);</p><p>//报错<br>pupil2.study(); //Uncaught TypeError: pupil2.study is not a function</p><pre><code>##### 使用apply实现继承```js//父类构造函数function Student (name, age, subject) {  this.name = name;  this.age = age;   this.subject = subject;}//子类构造函数function Pupil(name, age, subject, school) {  //使用applay实现继承  Student.apply(this, [name, age, subject]);  this.school = school;}//实例化Pupillet pupil2 = new Pupil(&#39;zhudk&#39;, 8, &#39;小学义务教育课程&#39;, &#39;北大附小&#39;);</code></pre><h3 id="ES6中对象的创建"><a href="#ES6中对象的创建" class="headerlink" title="ES6中对象的创建"></a>ES6中对象的创建</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//定义类</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//构造方法</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subject <span class="token operator">=</span> subject<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//类中的方法</span>  <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我在学习'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//实例化类</span><span class="token keyword">let</span> student3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'zhudk'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'前端开发'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student3<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//我在学习前端开发</span></code></pre><h3 id="ES6中对象的继承"><a href="#ES6中对象的继承" class="headerlink" title="ES6中对象的继承"></a>ES6中对象的继承</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//子类</span><span class="token keyword">class</span> <span class="token class-name">Pupil</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> subject<span class="token punctuation">,</span> school<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//调用父类的constructor</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> subject<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>school <span class="token operator">=</span> school<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> pupil <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pupil</span><span class="token punctuation">(</span><span class="token string">'zhudk'</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'小学义务教育课程'</span><span class="token punctuation">,</span> <span class="token string">'北大附小'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pupil<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//我在学习小学义务教育课程</span></code></pre><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos 7 上gitlab使用教程</title>
      <link href="/2019/04/27/centos7-shang-gitlab-shi-yong-jiao-cheng/"/>
      <url>/2019/04/27/centos7-shang-gitlab-shi-yong-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sat Apr 27 2019 22:45:42 GMT+0800 (中国标准时间) --><h2 id="1安装gitlab"><a href="#1安装gitlab" class="headerlink" title="1安装gitlab"></a>1安装gitlab</h2><pre class=" language-shell"><code class="language-shell">curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash sudo yum install gitlab-ce </code></pre><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><pre class=" language-shell"><code class="language-shell">vim /etc/gitlab/gitlab.rb</code></pre><h3 id="常用gitlab命令"><a href="#常用gitlab命令" class="headerlink" title="常用gitlab命令"></a>常用gitlab命令</h3><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><pre class=" language-shell"><code class="language-shell">sudo gitlab-ctl start</code></pre><h2 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h2><pre class=" language-shell"><code class="language-shell"> sudo gitlab-ctl stop</code></pre><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><pre class=" language-shell"><code class="language-shell"> sudo gitlab-ctl restart</code></pre><h2 id="重置配置"><a href="#重置配置" class="headerlink" title="重置配置"></a>重置配置</h2><pre class=" language-shell"><code class="language-shell"> sudo gitlab-ctl reconfigure </code></pre><h2 id="2安装-gitlab-runner"><a href="#2安装-gitlab-runner" class="headerlink" title="2安装 gitlab-runner"></a>2安装 gitlab-runner</h2><h2 id="添加repository"><a href="#添加repository" class="headerlink" title="添加repository"></a>添加repository</h2><pre class=" language-shell"><code class="language-shell"> curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash</code></pre><h2 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h2><pre class=" language-shell"><code class="language-shell"> yum install gitlab-runner</code></pre><h2 id="注册runner"><a href="#注册runner" class="headerlink" title="注册runner"></a>注册runner</h2><pre class=" language-shell"><code class="language-shell"> sudo gitlab-runner register</code></pre><blockquote><p>执行上述命令之后，之后的流程如下：<br>第一处红线：输入部署完成的gitlab地址比如<a href="http://111.111.111.111:8080/" target="_blank" rel="noopener">http://111.111.111.111:8080/</a><br>第二处红线: 输入token，token的值可以在登录gitlab之后，下图所示位置找到，先点击右上方Admin Settings，再找到左侧列表的runners</p></blockquote><p><img src="https://res.cloudinary.com/lumiazdk/image/upload/v1554635068/hmpoapgta6jrvljd25md.png" alt><br><img src="https://res.cloudinary.com/lumiazdk/image/upload/v1554635084/hjswdrq7ajbjod0ssuw5.png" alt></p><blockquote><p>选executor时不了解docker的可以选shell，根据提示输入账户密码即可注册成功<br>最后gitlab中会出现runner</p></blockquote><p><img src="https://res.cloudinary.com/lumiazdk/image/upload/v1554635100/le8faa2sg5nrgci7gmvg.png" alt></p><blockquote><p>配置成功！</p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现MVVM</title>
      <link href="/2019/04/27/mvvm/"/>
      <url>/2019/04/27/mvvm/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sat Apr 27 2019 22:45:42 GMT+0800 (中国标准时间) --><h2 id="为什么要手写MVVM"><a href="#为什么要手写MVVM" class="headerlink" title="为什么要手写MVVM?"></a>为什么要手写MVVM?</h2><blockquote><p>因为我要在公司项目中使用，哈哈哈哈哈！</p></blockquote><h2 id="数据劫持"><a href="#数据劫持" class="headerlink" title="数据劫持"></a>数据劫持</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 添加数据监听</span>    <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 验证 data</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data <span class="token operator">||</span> <span class="token keyword">typeof</span> data <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 要对这个 data 数据将原有的属性改成 set 和 get 的形式</span>        <span class="token comment" spellcheck="true">// 要将数据一一劫持，先获取到 data 的 key 和 value</span>        Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 劫持（实现数据响应式）</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">defineReactive</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 深度劫持</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 数据响应式</span>    <span class="token function">defineReactive</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 每个变化的数据都会对应一个数组，这个数组是存放所有更新的操作</span>        <span class="token keyword">let</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取某个值被监听到</span>        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>            enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当取值时调用的方法</span>                Dep<span class="token punctuation">.</span>target <span class="token operator">&amp;&amp;</span> dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当给 data 属性中设置的值适合，更改获取的属性的值</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">!==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    _this<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 重新赋值如果是对象进行深度劫持</span>                    value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>                    dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通知所有人数据更新了</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><pre class=" language-js"><code class="language-js">CompileUtil <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 更新节点数据的方法</span>CompileUtil<span class="token punctuation">.</span>updater <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 文本更新</span>    <span class="token function">textUpdater</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        node<span class="token punctuation">.</span>textContent <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 输入框更新</span>    <span class="token function">modelUpdater</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取 data 值的方法</span>CompileUtil<span class="token punctuation">.</span>getVal <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>vm<span class="token punctuation">,</span> exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 将匹配的值用 . 分割开，如 vm.data.a.b</span>    exp <span class="token operator">=</span> exp<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 归并取值</span>    <span class="token keyword">return</span> exp<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> prev<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> vm<span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取文本 {{}} 中变量在 data 对应的值</span>CompileUtil<span class="token punctuation">.</span>getTextVal <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>vm<span class="token punctuation">,</span> exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用正则匹配出 {{ }} 间的变量名，再调用 getVal 获取值</span>    <span class="token keyword">return</span> exp<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\{\{([^}]+)\}\}/g</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getVal</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置 data 值的方法</span>CompileUtil<span class="token punctuation">.</span>setVal <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>vm<span class="token punctuation">,</span> exp<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    exp <span class="token operator">=</span> exp<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> exp<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> next<span class="token punctuation">,</span> currentIndex<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果当前归并的为数组的最后一项，则将新值设置到该属性</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentIndex <span class="token operator">===</span> exp<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> prev<span class="token punctuation">[</span>next<span class="token punctuation">]</span> <span class="token operator">=</span> newVal        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 继续归并</span>        <span class="token keyword">return</span> prev<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> vm<span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>CompileUtil<span class="token punctuation">.</span>model <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取赋值的方法</span>    <span class="token keyword">let</span> updateFn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>updater<span class="token punctuation">[</span><span class="token string">"modelUpdater"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取 data 中对应的变量的值</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getVal</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> exp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加观察者，作用与 text 方法相同</span>    <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> exp<span class="token punctuation">,</span> newValue <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        updateFn <span class="token operator">&amp;&amp;</span> <span class="token function">updateFn</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// v-model 双向数据绑定，对 input 添加事件监听</span>    node<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取输入的新值</span>        <span class="token keyword">let</span> newValue <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 更新到节点</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> exp<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 第一次设置值</span>    updateFn <span class="token operator">&amp;&amp;</span> <span class="token function">updateFn</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 处理文本节点 {{}} 的方法</span>CompileUtil<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取赋值的方法</span>    <span class="token keyword">let</span> updateFn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>updater<span class="token punctuation">[</span><span class="token string">"textUpdater"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取 data 中对应的变量的值</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTextVal</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> exp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过正则替换，将取到数据中的值替换掉 {{ }}</span>    exp<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\{\{([^}]+)\}\}/g</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 解析时遇到了模板中需要替换为数据值的变量时，应该添加一个观察者</span>        <span class="token comment" spellcheck="true">// 当变量重新赋值时，调用更新值节点到 Dom 的方法</span>        <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> newValue <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果数据发生变化，重新获取新值</span>            updateFn <span class="token operator">&amp;&amp;</span> <span class="token function">updateFn</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 第一次设置值</span>    updateFn <span class="token operator">&amp;&amp;</span> <span class="token function">updateFn</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>CompileUtil<span class="token punctuation">.</span>on <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    node<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        vm<span class="token punctuation">.</span>$methods<span class="token punctuation">[</span>exp<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="更多内容见-github"><a href="#更多内容见-github" class="headerlink" title="更多内容见 github"></a>更多内容见 <a href="https://github.com/lumiazdk/MVVM" target="_blank" rel="noopener">github</a></h2><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
